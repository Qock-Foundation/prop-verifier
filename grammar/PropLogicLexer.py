# Generated from PropLogic.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,184,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,68,8,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,89,8,1,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,100,8,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,3,4,123,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,132,8,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,161,8,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,173,8,11,10,11,12,11,176,9,11,
        1,12,4,12,179,8,12,11,12,12,12,180,1,12,1,12,0,0,13,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,7,2,0,8596,
        8596,8660,8660,2,0,8594,8594,8658,8658,2,0,43,43,8853,8853,3,0,33,
        33,126,126,172,172,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,217,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,1,67,1,0,0,0,3,88,1,0,0,0,5,99,1,0,0,0,7,108,1,0,0,0,9,122,1,0,
        0,0,11,131,1,0,0,0,13,160,1,0,0,0,15,162,1,0,0,0,17,164,1,0,0,0,
        19,166,1,0,0,0,21,168,1,0,0,0,23,170,1,0,0,0,25,178,1,0,0,0,27,28,
        5,101,0,0,28,29,5,113,0,0,29,30,5,117,0,0,30,31,5,105,0,0,31,68,
        5,118,0,0,32,33,5,69,0,0,33,34,5,113,0,0,34,35,5,117,0,0,35,36,5,
        105,0,0,36,68,5,118,0,0,37,38,5,69,0,0,38,39,5,81,0,0,39,40,5,85,
        0,0,40,41,5,73,0,0,41,68,5,86,0,0,42,43,5,101,0,0,43,44,5,113,0,
        0,44,45,5,117,0,0,45,46,5,105,0,0,46,47,5,118,0,0,47,48,5,97,0,0,
        48,49,5,108,0,0,49,50,5,101,0,0,50,51,5,110,0,0,51,68,5,116,0,0,
        52,53,5,60,0,0,53,54,5,45,0,0,54,68,5,62,0,0,55,56,5,60,0,0,56,57,
        5,61,0,0,57,68,5,62,0,0,58,59,5,60,0,0,59,60,5,45,0,0,60,61,5,45,
        0,0,61,68,5,62,0,0,62,63,5,60,0,0,63,64,5,61,0,0,64,65,5,61,0,0,
        65,68,5,62,0,0,66,68,7,0,0,0,67,27,1,0,0,0,67,32,1,0,0,0,67,37,1,
        0,0,0,67,42,1,0,0,0,67,52,1,0,0,0,67,55,1,0,0,0,67,58,1,0,0,0,67,
        62,1,0,0,0,67,66,1,0,0,0,68,2,1,0,0,0,69,70,5,105,0,0,70,71,5,109,
        0,0,71,72,5,112,0,0,72,73,5,108,0,0,73,74,5,105,0,0,74,75,5,101,
        0,0,75,89,5,115,0,0,76,77,5,73,0,0,77,78,5,77,0,0,78,79,5,80,0,0,
        79,80,5,76,0,0,80,81,5,73,0,0,81,82,5,69,0,0,82,89,5,83,0,0,83,84,
        5,45,0,0,84,89,5,62,0,0,85,86,5,61,0,0,86,89,5,62,0,0,87,89,7,1,
        0,0,88,69,1,0,0,0,88,76,1,0,0,0,88,83,1,0,0,0,88,85,1,0,0,0,88,87,
        1,0,0,0,89,4,1,0,0,0,90,91,5,111,0,0,91,100,5,114,0,0,92,93,5,79,
        0,0,93,100,5,82,0,0,94,95,5,124,0,0,95,100,5,124,0,0,96,97,5,92,
        0,0,97,100,5,47,0,0,98,100,5,8744,0,0,99,90,1,0,0,0,99,92,1,0,0,
        0,99,94,1,0,0,0,99,96,1,0,0,0,99,98,1,0,0,0,100,6,1,0,0,0,101,102,
        5,120,0,0,102,103,5,111,0,0,103,109,5,114,0,0,104,105,5,88,0,0,105,
        106,5,79,0,0,106,109,5,82,0,0,107,109,7,2,0,0,108,101,1,0,0,0,108,
        104,1,0,0,0,108,107,1,0,0,0,109,8,1,0,0,0,110,111,5,97,0,0,111,112,
        5,110,0,0,112,123,5,100,0,0,113,114,5,65,0,0,114,115,5,78,0,0,115,
        123,5,68,0,0,116,117,5,38,0,0,117,123,5,38,0,0,118,123,5,42,0,0,
        119,120,5,47,0,0,120,123,5,92,0,0,121,123,5,8743,0,0,122,110,1,0,
        0,0,122,113,1,0,0,0,122,116,1,0,0,0,122,118,1,0,0,0,122,119,1,0,
        0,0,122,121,1,0,0,0,123,10,1,0,0,0,124,125,5,110,0,0,125,126,5,111,
        0,0,126,132,5,116,0,0,127,128,5,78,0,0,128,129,5,79,0,0,129,132,
        5,84,0,0,130,132,7,3,0,0,131,124,1,0,0,0,131,127,1,0,0,0,131,130,
        1,0,0,0,132,12,1,0,0,0,133,134,5,102,0,0,134,135,5,97,0,0,135,136,
        5,108,0,0,136,137,5,115,0,0,137,161,5,101,0,0,138,139,5,70,0,0,139,
        140,5,97,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,161,5,101,0,
        0,143,144,5,70,0,0,144,145,5,65,0,0,145,146,5,76,0,0,146,147,5,83,
        0,0,147,161,5,69,0,0,148,161,5,48,0,0,149,150,5,110,0,0,150,151,
        5,117,0,0,151,152,5,108,0,0,152,161,5,108,0,0,153,154,5,110,0,0,
        154,155,5,105,0,0,155,161,5,108,0,0,156,161,5,8869,0,0,157,158,5,
        111,0,0,158,159,5,95,0,0,159,161,5,79,0,0,160,133,1,0,0,0,160,138,
        1,0,0,0,160,143,1,0,0,0,160,148,1,0,0,0,160,149,1,0,0,0,160,153,
        1,0,0,0,160,156,1,0,0,0,160,157,1,0,0,0,161,14,1,0,0,0,162,163,5,
        40,0,0,163,16,1,0,0,0,164,165,5,41,0,0,165,18,1,0,0,0,166,167,5,
        91,0,0,167,20,1,0,0,0,168,169,5,93,0,0,169,22,1,0,0,0,170,174,7,
        4,0,0,171,173,7,5,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,
        0,0,0,174,175,1,0,0,0,175,24,1,0,0,0,176,174,1,0,0,0,177,179,7,6,
        0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,
        0,0,181,182,1,0,0,0,182,183,6,12,0,0,183,26,1,0,0,0,10,0,67,88,99,
        108,122,131,160,174,180,1,6,0,0
    ]

class PropLogicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EquivStr = 1
    ImpliesStr = 2
    OrStr = 3
    XorStr = 4
    AndStr = 5
    NotStr = 6
    FalseStr = 7
    LParenStr = 8
    RParenStr = 9
    LBracketStr = 10
    RBracketStr = 11
    Name = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "EquivStr", "ImpliesStr", "OrStr", "XorStr", "AndStr", "NotStr", 
            "FalseStr", "LParenStr", "RParenStr", "LBracketStr", "RBracketStr", 
            "Name", "WS" ]

    ruleNames = [ "EquivStr", "ImpliesStr", "OrStr", "XorStr", "AndStr", 
                  "NotStr", "FalseStr", "LParenStr", "RParenStr", "LBracketStr", 
                  "RBracketStr", "Name", "WS" ]

    grammarFileName = "PropLogic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


